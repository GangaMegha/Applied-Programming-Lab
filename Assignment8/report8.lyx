#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Python Assignment No.
 8
\end_layout

\begin_layout Author
Ganga Meghanath
\end_layout

\begin_layout Date
EE15B025
\end_layout

\begin_layout Part*
Objective :
\end_layout

\begin_layout Itemize
Symbolic Algebra
\end_layout

\begin_layout Itemize
Analysis of Circuits using Laplace Transforms 
\end_layout

\begin_layout Part*
Code :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import sympy as sym
\end_layout

\begin_layout Plain Layout

import pylab as p
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import scipy.signal as sp
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mp
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

s=sym.symbols('s')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def lowpass(R1,R2,C1,C2,G,n,Vi) :
\end_layout

\begin_layout Plain Layout

	A=sym.Matrix([[0,0,1,-1/n],[-1/(1+s*R2*C2),1,0,0],
\backslash

\end_layout

\begin_layout Plain Layout

		[0,-G,G,1],[-1/R1-1/R2-s*C1,1/R2,0,s*C1]])
\end_layout

\begin_layout Plain Layout

	b=sym.Matrix([[0],[0],[0],[-1/R1]])
\end_layout

\begin_layout Plain Layout

	V=A.inv()*b
\end_layout

\begin_layout Plain Layout

	Vo=Vi*(-1)*V[3]
\end_layout

\begin_layout Plain Layout

	return(A,b,Vo)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def highpass(R1,R3,C1,C2,G,n,Vi) :
\end_layout

\begin_layout Plain Layout

	A=sym.Matrix([[C1*s+1/R1+C2*s,-C2*s,0,-1/R1],
\backslash

\end_layout

\begin_layout Plain Layout

		[-C2*s,1/R3+C2*s,0,0],[0,0,1/(n-1)+1,-1/(n-1)],[0,1,-1,1/G]])
\end_layout

\begin_layout Plain Layout

	b=sym.Matrix([[C1*s],[0],[0],[0]])
\end_layout

\begin_layout Plain Layout

	V=A.inv()*b
\end_layout

\begin_layout Plain Layout

	Vo=Vi*V[0]
\end_layout

\begin_layout Plain Layout

	return(A,b,Vo)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def impulse_response(Vo):	#Compute and plot impulse response
\end_layout

\begin_layout Plain Layout

	w=p.logspace(0,8,801)
\end_layout

\begin_layout Plain Layout

	ss=1j*w
\end_layout

\begin_layout Plain Layout

	hf=sym.lambdify(s,Vo,'numpy')
\end_layout

\begin_layout Plain Layout

	v=hf(ss)
\end_layout

\begin_layout Plain Layout

	p.loglog(w,abs(v),lw=2)
\end_layout

\begin_layout Plain Layout

	p.grid(True)
\end_layout

\begin_layout Plain Layout

	p.title('Impulse Response')
\end_layout

\begin_layout Plain Layout

	p.xlabel('w (log scale)')
\end_layout

\begin_layout Plain Layout

	p.ylabel('log|H(jw)|')
\end_layout

\begin_layout Plain Layout

	p.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def output(Vo,a,b,n):	#compute and plot time domain response
\end_layout

\begin_layout Plain Layout

	numerator,denominator=sym.simplify(Vo).as_numer_denom()
\end_layout

\begin_layout Plain Layout

	try :
\end_layout

\begin_layout Plain Layout

		num,den=sym.Poly(numerator).all_coeffs(),
\backslash

\end_layout

\begin_layout Plain Layout

			sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	except :
\end_layout

\begin_layout Plain Layout

		num,den=(numerator),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	H=sp.lti(np.array(num,float),np.array(den,float))
\end_layout

\begin_layout Plain Layout

	t,x=sp.impulse(H,None,np.linspace(a,b,n))
\end_layout

\begin_layout Plain Layout

	mp.plot(t,x)
\end_layout

\begin_layout Plain Layout

	mp.title("Output")
\end_layout

\begin_layout Plain Layout

	mp.xlabel('Time')
\end_layout

\begin_layout Plain Layout

	mp.ylabel(r'$v_o$(t)')
\end_layout

\begin_layout Plain Layout

	mp.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def damped_sine(Vo,a,w0):	#For question 4
\end_layout

\begin_layout Plain Layout

	Vi=w0/((s+a)**2 + w0**2)
\end_layout

\begin_layout Plain Layout

	Vo2=Vo*Vi
\end_layout

\begin_layout Plain Layout

	output(Vo2,0,0.6,10001)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 1
\end_layout

\begin_layout Plain Layout

A,b,Vo=lowpass(1000.0,1000.0,1e-6,1e-6,1000.0,2,1)
\end_layout

\begin_layout Plain Layout

impulse_response(Vo)
\end_layout

\begin_layout Plain Layout

Vi=1/s
\end_layout

\begin_layout Plain Layout

Vo=Vo*(-Vi)
\end_layout

\begin_layout Plain Layout

output(Vo,0,0.01,1001)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 2 and 3
\end_layout

\begin_layout Plain Layout

A,b,Vo=highpass(1000.0,1000.0,1e-6,1e-6,1000.0,2,1)
\end_layout

\begin_layout Plain Layout

impulse_response(Vo)
\end_layout

\begin_layout Plain Layout

Vi=2000*np.pi/(s**2 + (2000*np.pi)**2) + s/(s**2 + (2e6*np.pi)**2)
\end_layout

\begin_layout Plain Layout

Vo1=Vo*Vi
\end_layout

\begin_layout Plain Layout

output(Vo1,0,0.01,100001)
\end_layout

\begin_layout Plain Layout

output(Vo1,0,0.00009,10001)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 4
\end_layout

\begin_layout Plain Layout

damped_sine(Vo,10,800)
\end_layout

\begin_layout Plain Layout

damped_sine(Vo,20,500)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 5
\end_layout

\begin_layout Plain Layout

Vi=1/s
\end_layout

\begin_layout Plain Layout

Vo3=Vo*Vi
\end_layout

\begin_layout Plain Layout

output(Vo3,0,0.05,1001)
\end_layout

\end_inset


\end_layout

\begin_layout Part*
Question 1
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def lowpass(R1,R2,C1,C2,G,n,Vi) :
\end_layout

\begin_layout Plain Layout

	A=sym.Matrix([[0,0,1,-1/n],[-1/(1+s*R2*C2),1,0,0],
\backslash

\end_layout

\begin_layout Plain Layout

		[0,-G,G,1],[-1/R1-1/R2-s*C1,1/R2,0,s*C1]])
\end_layout

\begin_layout Plain Layout

	b=sym.Matrix([[0],[0],[0],[-1/R1]])
\end_layout

\begin_layout Plain Layout

	V=A.inv()*b
\end_layout

\begin_layout Plain Layout

	Vo=Vi*(-1)*V[3]
\end_layout

\begin_layout Plain Layout

	return(A,b,Vo)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def impulse_response(Vo):	#Compute and plot impulse response
\end_layout

\begin_layout Plain Layout

	w=p.logspace(0,8,801)
\end_layout

\begin_layout Plain Layout

	ss=1j*w
\end_layout

\begin_layout Plain Layout

	hf=sym.lambdify(s,Vo,'numpy')
\end_layout

\begin_layout Plain Layout

	v=hf(ss)
\end_layout

\begin_layout Plain Layout

	p.loglog(w,abs(v),lw=2)
\end_layout

\begin_layout Plain Layout

	p.grid(True)
\end_layout

\begin_layout Plain Layout

	p.title('Impulse Response')
\end_layout

\begin_layout Plain Layout

	p.xlabel('w (log scale)')
\end_layout

\begin_layout Plain Layout

	p.ylabel('log|H(jw)|')
\end_layout

\begin_layout Plain Layout

	p.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def output(Vo,a,b,n):	#compute and plot time domain response
\end_layout

\begin_layout Plain Layout

	numerator,denominator=sym.simplify(Vo).as_numer_denom()
\end_layout

\begin_layout Plain Layout

	try :
\end_layout

\begin_layout Plain Layout

		num,den=sym.Poly(numerator).all_coeffs(),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	except :
\end_layout

\begin_layout Plain Layout

		num,den=(numerator),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	H=sp.lti(np.array(num,float),np.array(den,float))
\end_layout

\begin_layout Plain Layout

	t,x=sp.impulse(H,None,np.linspace(a,b,n))
\end_layout

\begin_layout Plain Layout

	mp.plot(t,x)
\end_layout

\begin_layout Plain Layout

	mp.title("Output")
\end_layout

\begin_layout Plain Layout

	mp.xlabel('Time')
\end_layout

\begin_layout Plain Layout

	mp.ylabel(r'$v_o$(t)')
\end_layout

\begin_layout Plain Layout

	mp.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 1
\end_layout

\begin_layout Plain Layout

A,b,Vo=lowpass(1000.0,1000.0,1e-6,1e-6,1000.0,2,1)
\end_layout

\begin_layout Plain Layout

impulse_response(Vo)
\end_layout

\begin_layout Plain Layout

Vi=1/s
\end_layout

\begin_layout Plain Layout

Vo=Vo*(-Vi)
\end_layout

\begin_layout Plain Layout

output(Vo,0,0.01,1001)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This gives us a low pass filter.
 This means that all signal frequencies below the filter bandwidth will
 be allowed to pass through the filter.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_1.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Step response of the filter ,
\end_layout

\begin_layout Standard
ie, Output of the highpass filter when the input is :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=u_{0}(t)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2.png
	scale 50

\end_inset


\end_layout

\begin_layout Part*
Question 2 and 3
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def highpass(R1,R3,C1,C2,G,n,Vi) :
\end_layout

\begin_layout Plain Layout

	A=sym.Matrix([[C1*s+1/R1+C2*s,-C2*s,0,-1/R1],
\backslash

\end_layout

\begin_layout Plain Layout

		[-C2*s,1/R3+C2*s,0,0],[0,0,1/(n-1)+1,-1/(n-1)],[0,1,-1,1/G]])
\end_layout

\begin_layout Plain Layout

	b=sym.Matrix([[C1*s],[0],[0],[0]])
\end_layout

\begin_layout Plain Layout

	V=A.inv()*b
\end_layout

\begin_layout Plain Layout

	Vo=Vi*V[0]
\end_layout

\begin_layout Plain Layout

	return(A,b,Vo)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def impulse_response(Vo):	#Compute and plot impulse response
\end_layout

\begin_layout Plain Layout

	w=p.logspace(0,8,801)
\end_layout

\begin_layout Plain Layout

	ss=1j*w
\end_layout

\begin_layout Plain Layout

	hf=sym.lambdify(s,Vo,'numpy')
\end_layout

\begin_layout Plain Layout

	v=hf(ss)
\end_layout

\begin_layout Plain Layout

	p.loglog(w,abs(v),lw=2)
\end_layout

\begin_layout Plain Layout

	p.grid(True)
\end_layout

\begin_layout Plain Layout

	p.title('Impulse Response')
\end_layout

\begin_layout Plain Layout

	p.xlabel('w (log scale)')
\end_layout

\begin_layout Plain Layout

	p.ylabel('log|H(jw)|')
\end_layout

\begin_layout Plain Layout

	p.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def output(Vo,a,b,n):	#compute and plot time domain response
\end_layout

\begin_layout Plain Layout

	numerator,denominator=sym.simplify(Vo).as_numer_denom()
\end_layout

\begin_layout Plain Layout

	try :
\end_layout

\begin_layout Plain Layout

		num,den=sym.Poly(numerator).all_coeffs(),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	except :
\end_layout

\begin_layout Plain Layout

		num,den=(numerator),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	H=sp.lti(np.array(num,float),np.array(den,float))
\end_layout

\begin_layout Plain Layout

	t,x=sp.impulse(H,None,np.linspace(a,b,n))
\end_layout

\begin_layout Plain Layout

	mp.plot(t,x)
\end_layout

\begin_layout Plain Layout

	mp.title("Output")
\end_layout

\begin_layout Plain Layout

	mp.xlabel('Time')
\end_layout

\begin_layout Plain Layout

	mp.ylabel(r'$v_o$(t)')
\end_layout

\begin_layout Plain Layout

	mp.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 2 and 3
\end_layout

\begin_layout Plain Layout

A,b,Vo=highpass(1000.0,1000.0,1e-6,1e-6,1000.0,2,1)
\end_layout

\begin_layout Plain Layout

impulse_response(Vo)
\end_layout

\begin_layout Plain Layout

Vi=2000*np.pi/(s**2 + (2000*np.pi)**2) + s/(s**2 + (2e6*np.pi)**2)
\end_layout

\begin_layout Plain Layout

Vo1=Vo*Vi
\end_layout

\begin_layout Plain Layout

output(Vo1,0,0.01,100001)
\end_layout

\begin_layout Plain Layout

output(Vo1,0,0.00009,10001)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This gives us a high pass filter.
 This means that all signal frequencies above the filter bandwidth will
 be allowed to pass through the filter.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_3.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Output of the filter when the input is :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=(sin(2000\pi t)+cos(2×106\pi t))*u_{0}(t)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_4.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Zooming in :
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_5.png
	scale 50

\end_inset


\end_layout

\begin_layout Part*
Question 4
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def output(Vo,a,b,n):	#compute and plot time domain response
\end_layout

\begin_layout Plain Layout

	numerator,denominator=sym.simplify(Vo).as_numer_denom()
\end_layout

\begin_layout Plain Layout

	try :
\end_layout

\begin_layout Plain Layout

		num,den=sym.Poly(numerator).all_coeffs(),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	except :
\end_layout

\begin_layout Plain Layout

		num,den=(numerator),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	H=sp.lti(np.array(num,float),np.array(den,float))
\end_layout

\begin_layout Plain Layout

	t,x=sp.impulse(H,None,np.linspace(a,b,n))
\end_layout

\begin_layout Plain Layout

	mp.plot(t,x)
\end_layout

\begin_layout Plain Layout

	mp.title("Output")
\end_layout

\begin_layout Plain Layout

	mp.xlabel('Time')
\end_layout

\begin_layout Plain Layout

	mp.ylabel(r'$v_o$(t)')
\end_layout

\begin_layout Plain Layout

	mp.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def damped_sine(Vo,a,w0):	#For question 4
\end_layout

\begin_layout Plain Layout

	Vi=w0/((s+a)**2 + w0**2)
\end_layout

\begin_layout Plain Layout

	Vo2=Vo*Vi
\end_layout

\begin_layout Plain Layout

	output(Vo2,0,0.6,10001)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 4
\end_layout

\begin_layout Plain Layout

damped_sine(Vo,10,800)
\end_layout

\begin_layout Plain Layout

damped_sine(Vo,20,500)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Output of the high pass filter when the input is :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=e^{-10t}sin(800t)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_6.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Output of the highpass filter when the input is :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=e^{-20t}sin(500t)*u_{0}(t)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_7.png
	scale 50

\end_inset


\end_layout

\begin_layout Part*
Question 5
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def output(Vo,a,b,n):	#compute and plot time domain response
\end_layout

\begin_layout Plain Layout

	numerator,denominator=sym.simplify(Vo).as_numer_denom()
\end_layout

\begin_layout Plain Layout

	try :
\end_layout

\begin_layout Plain Layout

		num,den=sym.Poly(numerator).all_coeffs(),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	except :
\end_layout

\begin_layout Plain Layout

		num,den=(numerator),sym.Poly(denominator).all_coeffs()
\end_layout

\begin_layout Plain Layout

	H=sp.lti(np.array(num,float),np.array(den,float))
\end_layout

\begin_layout Plain Layout

	t,x=sp.impulse(H,None,np.linspace(a,b,n))
\end_layout

\begin_layout Plain Layout

	mp.plot(t,x)
\end_layout

\begin_layout Plain Layout

	mp.title("Output")
\end_layout

\begin_layout Plain Layout

	mp.xlabel('Time')
\end_layout

\begin_layout Plain Layout

	mp.ylabel(r'$v_o$(t)')
\end_layout

\begin_layout Plain Layout

	mp.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Question 5
\end_layout

\begin_layout Plain Layout

Vi=1/s
\end_layout

\begin_layout Plain Layout

Vo3=Vo*Vi
\end_layout

\begin_layout Plain Layout

output(Vo3,0,0.05,1001)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Output of the highpass filter when the input is :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=u(t)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_8.png
	scale 50

\end_inset


\end_layout

\end_body
\end_document
